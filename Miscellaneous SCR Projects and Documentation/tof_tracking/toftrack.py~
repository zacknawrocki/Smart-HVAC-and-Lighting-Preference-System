import sys, os, time,datetime, math, rospy, json
import numpy as np
from pytz import timezone, utc

for module in ['HVAC', 'time_of_flight', 'color_sensors', 'lights']:
	sys.path.append(os.environ["HOME"] + "/catkin_ws/src/scr_control/scripts/" + module)
import SCR_HVAC_client as hvac_control
import SCR_TOF_client  as tof_ros
import SCR_COS_client  as csensors_ros	
import SCR_OctaLight_client  as lights_ros


#os.chdir("/home/arunas/catkin_ws/src/scr_control/scripts/time_of_flight")
#sys.path.append(os.getcwd())
#import SCR_TOF_client as tof_ros

#os.chdir("/home/arunas/catkin_ws/src/scr_control/scripts/lights")	
#sys.path.append(os.getcwd())
#import SCR_OctaLight_client as lights_ros										# lights ros functions
#os.chdir("/home/arunas/catkin_ws/src/scr_control/scripts/color_sensors")
#sys.path.append(os.getcwd())
#import SCR_COS_client as csensors_ros											# color sensors ros functions

os.chdir("/home/arunas/catkin_ws/src/scr_control/scripts/tk/tof_tracking/AuxFiles_Feb")
sys.path.append(os.getcwd())

import auxTracking_Feb as tof_aux 	# import needed tof processing functions


def local_time():
    # ignore day/month/year
    t = datetime.datetime.now().time()
    h, m, s, ms = t.hour, t.minute, t.second, t.microsecond//1000
    return "%02d:%02d:%02d.%02d" % (h, m, s, ms)

##
# LOAD BACKGROUNDS: TOF
try:
	Bxy = np.loadtxt( "Bxy.txt", delimiter = ',' );
	# Bxy = Bxy * cos_comp_array;
except:
	try:
		Bxy = np.loadtxt( "Bxy.txt", delimiter = ' ' );

	except:
		print('No Background Image Found: TOF')
		Bxy = np.zeros((75,160));

##
win_counter = np.zeros((2,1)); # 1. north, 2. east
win_counter_thresh = 20;
win_counter_bool = np.zeros((2,1));		

pose_thresh = 1.35;
prevOccs = []; 
frame = 0; filesavetrig = 1;

labels = list(range(1,30));

##
timestr = time.strftime("%Y%m%d-%H%M%S");
fname = 'OccLog_' + timestr + '.txt';
OccLog = open( fname, 'w' ); OccLog = open( fname, 'a' );

OccLog.write(local_time()); OccLog.write('\n\n'); 

print('ToF Tracking Active')

while(1):
	##
	try:
		# Exy = np.zeros((75,160));
		Exy = np.asarray(tof_ros.get_distances_all());
	except:
		print('ToF Reading Error');
		Exy = np.zeros((75,160));

	break 	

	##
	Fxy = tof_aux.compExy(Exy);
	Fxy = tof_aux.createFxy(Fxy,Bxy); 

	##
	num, OMapFeats, Fgm = tof_aux.getOMaps(Fxy, Debug = False); # occupancy mapping
	num_Morph, MorphFeats, Fgm_Morph = tof_aux.getOMaps(Fxy, Debug = True); # morph processing

	#numfalls, fall_locs, tFxy = tof_aux.fallDetect(Fxy); # fall detection

	##
	tempOccs, labels = tof_aux.Gobble(prevOccs, OMapFeats, MorphFeats, labels);
	prevOccs = tempOccs;
	numOcc = np.shape(prevOccs)[0];


	##
	numSit = 0; numStand = 0;
	occlocs = np.zeros((numOcc,2));
	for t in range (0,numOcc):
		occlocs[t,0] = prevOccs[t][0];
		occlocs[t,1] = prevOccs[t][1];

		if prevOccs[t][2] > pose_thresh:
			numStand += 1;
		else:
			numSit += 1;


	if numOcc > 0:
		# print(prevOccs)
		OccFeats = [ item.tolist() for item in prevOccs];
		# print(OccFeats)

		OccFeats = tof_aux.getClosestLightFixture( OccFeats );	
		# print('OF:', OccFeats)


		try:
			hvacOccs = np.zeros((numOcc, 4)); # clocx clocy plocx plocy light
			for n in range(0,numOcc):
				hvacOccs[n,0] = OccFeats[n][7]; #occupant tag

				hvacOccs[n,1:3] = OccFeats[n][0:2]; #current location
				# hvacOccs[n,2:4] = OccFeats[n][4:6]; #previous location
				hvacOccs[n,3] = OccFeats[n][6]; #nearest light fixture

			# write to HVAC file
			np.savetxt('/home/arunas/catkin_ws/src/scr_control/scripts/Toufiq/hvacOccs.txt', hvacOccs);	
		except:
			print('Error Updating HVAC File')

		try:
			# write to TOF log file
			OccLog.write(local_time()); OccLog.write('\n'); 
			OccLog.write(str(numOcc)); OccLog.write('\n');
			OccLog.write('{}\n\n'.format(OccFeats));
		except:
			print('Error Updating Occupant Log File')


		filesavetrig = 1;

	elif numOcc <= 0 and filesavetrig == 1:
		try:
			hvacOccs = np.zeros((1,4)); # tag clocx clocy light
			# write to HVAC file
			np.savetxt('/home/arunas/catkin_ws/src/scr_control/scripts/Toufiq/hvacOccs.txt', hvacOccs);	
		except:
			print('Error Updating HVAC File')

		try:
			OccFeats = [ item.tolist() for item in np.zeros((1,7))];
			# print('OF:', OccFeats)
			# write to TOF log file
			OccLog.write(local_time()); OccLog.write('\n'); 
			OccLog.write(str(numOcc)); OccLog.write('\n');
			OccLog.write('{}\n\n'.format(OccFeats));
		except:
			print('Error Updating Occupant Log File')

		filesavetrig = 0;


	##
	try:
		tof_aux.transfer_to_Status_Screen('Status_Occupancy', {"Total": numSit+numStand, \
													"Standing": numSit, "Sitting": numStand, "Lying": 0});
	except:
		print('Error Updating to Status Screen')


	#	
	try:
		[win_counter, win_counter_bool] = tof_aux.respondOccActivities( numOcc, occlocs, numSit, numStand, win_counter, win_counter_bool);
	except:
		print('Error Updating Occupant Mode')
	
	
	frame += 1;

	# time.sleep(0.01);

	# try:
	# 	if (frame%50) == 0:
	# 		os.system('cls' if os.name == 'nt' else 'clear')
	# except:
	# 	pass;

